name: Advanced GitOps CI/CD Pipeline

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main ]

jobs:
  # Detect changed files for conditional execution
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.changes.outputs.frontend }}
      tests: ${{ steps.changes.outputs.tests }}
      workflows: ${{ steps.changes.outputs.workflows }}
      docs: ${{ steps.changes.outputs.docs }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Check for file changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            frontend:
              - 'index.html'
              - 'css/**'
              - 'js/**'
              - 'static/**'
              - '*.html'
              - 'manifest.json'
            tests:
              - 'tests/**'
              - 'package.json'
              - 'package-lock.json'
            workflows:
              - '.github/workflows/**'
            docs:
              - 'README.md'
              - 'docs/**'
              - 'SECURITY.md'

  security-checks:
    name: Security Pre-checks
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.frontend == 'true' || needs.changes.outputs.tests == 'true' || needs.changes.outputs.workflows == 'true' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json
          
      - name: Install dependencies
        run: npm ci

      - name: Run security audit (fail on high)
        run: npm audit --audit-level=high
        
      - name: Run security linting
        run: npm run lint:js
        
  test-matrix:
    name: Test Matrix (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    needs: [changes, security-checks]
    if: ${{ needs.changes.outputs.frontend == 'true' || needs.changes.outputs.tests == 'true' }}
    strategy:
      fail-fast: false
      matrix:
        node-version: [16, 18, 20]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: package-lock.json
          
      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: |
          npm run lint:html
          npm run lint:css
          npm run lint:js
        continue-on-error: true
        
      - name: Run tests
        run: npm test
        continue-on-error: true

      - name: Upload test results for Node ${{ matrix.node-version }}
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-node-${{ matrix.node-version }}
          path: |
            package-lock.json
            npm-audit.json
          retention-days: 7

  test:
    name: Legacy Test Job (Compatibility)
    runs-on: ubuntu-latest
    needs: [changes, security-checks]
    if: ${{ needs.changes.outputs.frontend == 'true' || needs.changes.outputs.tests == 'true' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json
          
      - name: Ensure package files exist
        run: |
          if [ ! -f package.json ]; then
            echo "package.json not found. Creating it..."
            npm init -y
          fi
          if [ ! -f package-lock.json ]; then
            echo "package-lock.json not found. Running npm install to generate it..."
            npm install
          fi
        
      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: |
          npm run lint:html
          npm run lint:css
          npm run lint:js
        continue-on-error: true
        
      - name: Run tests
        run: npm test
        continue-on-error: true
        
      - name: Security audit (moderate level for reporting)
        run: npm run security:audit
        continue-on-error: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lint-results
          path: |
            package-lock.json
            npm-audit.json
          retention-days: 7
          
  deploy:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: [changes, security-checks, test-matrix, test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && (needs.changes.outputs.frontend == 'true' || needs.changes.outputs.workflows == 'true')
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js for build optimization
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json
      
      - name: Install dependencies
        run: npm ci
        
      - name: Run pre-deployment health check
        run: |
          echo "Running pre-deployment health check..."
          # Verify critical files exist
          test -f index.html || (echo "ERROR: index.html missing" && exit 1)
          test -f manifest.json || (echo "ERROR: manifest.json missing" && exit 1)
          echo "âœ… Pre-deployment health check passed"
      
      - name: Setup Pages
        uses: actions/configure-pages@v4
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'
      
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
      - name: Post-deployment verification
        run: |
          echo "ðŸš€ Deployment completed successfully!"
          echo "Site URL: ${{ steps.deployment.outputs.page_url }}"
          # Add basic site verification (you could curl the site here)
          
      - name: Notify deployment success
        run: |
          echo "âœ… Production deployment successful"
          echo "Deployed from commit: ${{ github.sha }}"
          echo "Deploy time: $(date)"
